   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "EndpointCalibration.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.ep_calibration_handle_message,"ax",%progbits
  20              	 .align 2
  21              	 .global ep_calibration_handle_message
  22              	 .thumb
  23              	 .thumb_func
  25              	ep_calibration_handle_message:
  26              	.LFB488:
  27              	 .file 1 "../HostCommunication/src/EndpointCalibration.c"
   1:../HostCommunication/src/EndpointCalibration.c **** /**
   2:../HostCommunication/src/EndpointCalibration.c ****  * \file EndpointCalibration.c
   3:../HostCommunication/src/EndpointCalibration.c ****  *
   4:../HostCommunication/src/EndpointCalibration.c ****  * \brief ...
   5:../HostCommunication/src/EndpointCalibration.c ****  *
   6:../HostCommunication/src/EndpointCalibration.c ****  * ...
   7:../HostCommunication/src/EndpointCalibration.c ****  *
   8:../HostCommunication/src/EndpointCalibration.c ****  */
   9:../HostCommunication/src/EndpointCalibration.c **** 
  10:../HostCommunication/src/EndpointCalibration.c **** /* ===========================================================================
  11:../HostCommunication/src/EndpointCalibration.c **** ** Copyright (C) 2018 Infineon Technologies AG
  12:../HostCommunication/src/EndpointCalibration.c **** ** All rights reserved.
  13:../HostCommunication/src/EndpointCalibration.c **** ** ===========================================================================
  14:../HostCommunication/src/EndpointCalibration.c **** **
  15:../HostCommunication/src/EndpointCalibration.c **** ** ===========================================================================
  16:../HostCommunication/src/EndpointCalibration.c **** ** This document contains proprietary information of Infineon Technologies AG.
  17:../HostCommunication/src/EndpointCalibration.c **** ** Passing on and copying of this document, and communication of its contents
  18:../HostCommunication/src/EndpointCalibration.c **** ** is not permitted without Infineon's prior written authorization.
  19:../HostCommunication/src/EndpointCalibration.c **** ** ===========================================================================
  20:../HostCommunication/src/EndpointCalibration.c **** */
  21:../HostCommunication/src/EndpointCalibration.c **** 
  22:../HostCommunication/src/EndpointCalibration.c **** /*
  23:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  24:../HostCommunication/src/EndpointCalibration.c ****    1. INCLUDE FILES
  25:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  26:../HostCommunication/src/EndpointCalibration.c **** */
  27:../HostCommunication/src/EndpointCalibration.c **** 
  28:../HostCommunication/src/EndpointCalibration.c **** #include "EndpointCalibration.h"
  29:../HostCommunication/src/EndpointCalibration.c **** #include "EndpointRadarChangeCodes.h"
  30:../HostCommunication/src/EndpointCalibration.c **** #include "PayloadHelper.h"
  31:../HostCommunication/src/EndpointCalibration.c **** 
  32:../HostCommunication/src/EndpointCalibration.c **** /*
  33:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  34:../HostCommunication/src/EndpointCalibration.c ****    2. LOCAL DEFINITIONS
  35:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  36:../HostCommunication/src/EndpointCalibration.c **** */
  37:../HostCommunication/src/EndpointCalibration.c **** 
  38:../HostCommunication/src/EndpointCalibration.c **** /**
  39:../HostCommunication/src/EndpointCalibration.c ****  * \internal
  40:../HostCommunication/src/EndpointCalibration.c ****  * \defgroup EndpointCalibrationCodes
  41:../HostCommunication/src/EndpointCalibration.c ****  *
  42:../HostCommunication/src/EndpointCalibration.c ****  * \brief These are the command codes to identify the payload type.
  43:../HostCommunication/src/EndpointCalibration.c ****  *
  44:../HostCommunication/src/EndpointCalibration.c ****  * Each payload message of the supported endpoint starts with one of these
  45:../HostCommunication/src/EndpointCalibration.c ****  * commend codes.
  46:../HostCommunication/src/EndpointCalibration.c ****  *
  47:../HostCommunication/src/EndpointCalibration.c ****  * @{
  48:../HostCommunication/src/EndpointCalibration.c ****  */
  49:../HostCommunication/src/EndpointCalibration.c **** 
  50:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_SET_ADC_FLASH_CALIBRATION		0x01	/**< A message to save ADC calibration data from EEPRO
  51:../HostCommunication/src/EndpointCalibration.c **** 
  52:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_GET_ADC_FLASH_CALIBRATION     	0x02	/**< A message to read ADC calibration data from E
  53:../HostCommunication/src/EndpointCalibration.c **** 
  54:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_CLEAR_ADC_FLASH_CALIBRATION    0x03	/**< A message to delete ADC calibration data from
  55:../HostCommunication/src/EndpointCalibration.c **** 
  56:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_SET_ADC_SRAM_CALIBRATION      	0x04	/**< A message to save ADC calibration data in SRA
  57:../HostCommunication/src/EndpointCalibration.c **** 
  58:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_GET_ADC_SRAM_CALIBRATION      	0x05	/**< A message to read ADC calibration data in SRA
  59:../HostCommunication/src/EndpointCalibration.c **** 
  60:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_CLEAR_ADC_SRAM_CALIBRATION     0x06	/**< A message to delete ADC calibration data from
  61:../HostCommunication/src/EndpointCalibration.c **** 
  62:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_SET_ALGO_FLASH_CALIBRATION		0x07  	/**< A message to store the Algo calibration in the
  63:../HostCommunication/src/EndpointCalibration.c **** 
  64:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_GET_ALGO_FLASH_CALIBRATION		0x08  	/**< A message to read current Algo calibration dat
  65:../HostCommunication/src/EndpointCalibration.c **** 
  66:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_CLEAR_ALGO_FLASH_CALIBRATION	0x09  	/**< A message to clear the Algo calibration data 
  67:../HostCommunication/src/EndpointCalibration.c **** 
  68:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_SET_ALGO_SRAM_CALIBRATION		0x0A  	/**< A message to store the Algo calibration data in
  69:../HostCommunication/src/EndpointCalibration.c **** 
  70:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_GET_ALGO_SRAM_CALIBRATION		0x0B  	/**< A message to read current Algo calibration data
  71:../HostCommunication/src/EndpointCalibration.c **** 
  72:../HostCommunication/src/EndpointCalibration.c **** #define  MSG_CLEAR_ALGO_SRAM_CALIBRATION	0x0C  	/**< A message to clear the Algo calibration data f
  73:../HostCommunication/src/EndpointCalibration.c **** 
  74:../HostCommunication/src/EndpointCalibration.c **** /** @} */
  75:../HostCommunication/src/EndpointCalibration.c **** 
  76:../HostCommunication/src/EndpointCalibration.c **** /*
  77:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  78:../HostCommunication/src/EndpointCalibration.c ****    3. LOCAL FUNCTION PROTOTYPES
  79:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  80:../HostCommunication/src/EndpointCalibration.c **** */
  81:../HostCommunication/src/EndpointCalibration.c **** 
  82:../HostCommunication/src/EndpointCalibration.c **** static uint16_t send_adc_calibration_data(uint8_t endpoint, Radar_Handle_t radar_driver, Calibratio
  83:../HostCommunication/src/EndpointCalibration.c **** 
  84:../HostCommunication/src/EndpointCalibration.c **** static uint16_t send_algo_calibration_data(uint8_t endpoint, Radar_Handle_t radar_driver, Calibrati
  85:../HostCommunication/src/EndpointCalibration.c **** 
  86:../HostCommunication/src/EndpointCalibration.c **** /*
  87:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  88:../HostCommunication/src/EndpointCalibration.c ****   4. LOCAL FUNCTIONS
  89:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
  90:../HostCommunication/src/EndpointCalibration.c **** */
  91:../HostCommunication/src/EndpointCalibration.c **** 
  92:../HostCommunication/src/EndpointCalibration.c **** static uint16_t send_adc_calibration_data(uint8_t endpoint, Radar_Handle_t radar_driver, Calibratio
  93:../HostCommunication/src/EndpointCalibration.c **** {
  94:../HostCommunication/src/EndpointCalibration.c **** 	uint16_t error_code = 0;
  95:../HostCommunication/src/EndpointCalibration.c **** 
  96:../HostCommunication/src/EndpointCalibration.c **** 	uint16_t num_of_bytes;
  97:../HostCommunication/src/EndpointCalibration.c **** 
  98:../HostCommunication/src/EndpointCalibration.c **** 	void* calibration_data_ptr = NULL;
  99:../HostCommunication/src/EndpointCalibration.c **** 
 100:../HostCommunication/src/EndpointCalibration.c **** 	//----------------------------------------------------------------------
 101:../HostCommunication/src/EndpointCalibration.c **** 
 102:../HostCommunication/src/EndpointCalibration.c **** 	error_code = radar_read_calibration(radar_driver, target, CALIBRATION_DATA_ADC, &calibration_data_
 103:../HostCommunication/src/EndpointCalibration.c **** 
 104:../HostCommunication/src/EndpointCalibration.c **** 	if (error_code == RADAR_ERR_OK)
 105:../HostCommunication/src/EndpointCalibration.c **** 	{
 106:../HostCommunication/src/EndpointCalibration.c **** 		uint8_t message_header[3];
 107:../HostCommunication/src/EndpointCalibration.c **** 
 108:../HostCommunication/src/EndpointCalibration.c **** 		/* setup message header */
 109:../HostCommunication/src/EndpointCalibration.c **** 		if (target == CALIBRATION_TARGET_FLASH)
 110:../HostCommunication/src/EndpointCalibration.c **** 		{
 111:../HostCommunication/src/EndpointCalibration.c **** 			wr_payload_u8(message_header, 0, MSG_GET_ADC_FLASH_CALIBRATION);
 112:../HostCommunication/src/EndpointCalibration.c **** 		}
 113:../HostCommunication/src/EndpointCalibration.c **** 		else
 114:../HostCommunication/src/EndpointCalibration.c **** 		{
 115:../HostCommunication/src/EndpointCalibration.c **** 			wr_payload_u8(message_header, 0, MSG_GET_ADC_SRAM_CALIBRATION);
 116:../HostCommunication/src/EndpointCalibration.c **** 		}
 117:../HostCommunication/src/EndpointCalibration.c **** 
 118:../HostCommunication/src/EndpointCalibration.c **** 		wr_payload_u16(message_header, 1, num_of_bytes);
 119:../HostCommunication/src/EndpointCalibration.c **** 
 120:../HostCommunication/src/EndpointCalibration.c **** 		/* send message header */
 121:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_header(endpoint, sizeof(message_header) + num_of_bytes);
 122:../HostCommunication/src/EndpointCalibration.c **** 
 123:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_payload(message_header, sizeof(message_header));
 124:../HostCommunication/src/EndpointCalibration.c **** 
 125:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_payload((uint8_t*)calibration_data_ptr, num_of_bytes);
 126:../HostCommunication/src/EndpointCalibration.c **** 
 127:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_tail();
 128:../HostCommunication/src/EndpointCalibration.c **** 	}
 129:../HostCommunication/src/EndpointCalibration.c **** 
 130:../HostCommunication/src/EndpointCalibration.c **** 	return error_code;
 131:../HostCommunication/src/EndpointCalibration.c **** }
 132:../HostCommunication/src/EndpointCalibration.c **** 
 133:../HostCommunication/src/EndpointCalibration.c **** //==============================================================================
 134:../HostCommunication/src/EndpointCalibration.c **** 
 135:../HostCommunication/src/EndpointCalibration.c **** static uint16_t send_algo_calibration_data(uint8_t endpoint, Radar_Handle_t radar_driver, Calibrati
 136:../HostCommunication/src/EndpointCalibration.c **** {
 137:../HostCommunication/src/EndpointCalibration.c **** 	uint16_t error_code = 0;
 138:../HostCommunication/src/EndpointCalibration.c **** 
 139:../HostCommunication/src/EndpointCalibration.c **** 	uint16_t num_of_bytes;
 140:../HostCommunication/src/EndpointCalibration.c **** 
 141:../HostCommunication/src/EndpointCalibration.c **** 	void* calibration_data_ptr;
 142:../HostCommunication/src/EndpointCalibration.c **** 
 143:../HostCommunication/src/EndpointCalibration.c **** 	//----------------------------------------------------------------------
 144:../HostCommunication/src/EndpointCalibration.c **** 
 145:../HostCommunication/src/EndpointCalibration.c **** 	error_code = radar_read_calibration(radar_driver, target, CALIBRATION_DATA_ALGO, &calibration_data
 146:../HostCommunication/src/EndpointCalibration.c **** 
 147:../HostCommunication/src/EndpointCalibration.c **** 	if (error_code == RADAR_ERR_OK)
 148:../HostCommunication/src/EndpointCalibration.c **** 	{
 149:../HostCommunication/src/EndpointCalibration.c **** 		uint8_t message_header[5];
 150:../HostCommunication/src/EndpointCalibration.c **** 
 151:../HostCommunication/src/EndpointCalibration.c **** 		/* setup message header */
 152:../HostCommunication/src/EndpointCalibration.c **** 
 153:../HostCommunication/src/EndpointCalibration.c **** 		if (target == CALIBRATION_TARGET_FLASH)
 154:../HostCommunication/src/EndpointCalibration.c **** 		{
 155:../HostCommunication/src/EndpointCalibration.c **** 			wr_payload_u8(message_header, 0, MSG_GET_ALGO_FLASH_CALIBRATION);
 156:../HostCommunication/src/EndpointCalibration.c **** 		}
 157:../HostCommunication/src/EndpointCalibration.c **** 		else
 158:../HostCommunication/src/EndpointCalibration.c **** 		{
 159:../HostCommunication/src/EndpointCalibration.c **** 			wr_payload_u8(message_header, 0, MSG_GET_ALGO_SRAM_CALIBRATION);
 160:../HostCommunication/src/EndpointCalibration.c **** 		}
 161:../HostCommunication/src/EndpointCalibration.c **** 
 162:../HostCommunication/src/EndpointCalibration.c **** 		wr_payload_u16(message_header, 1, ((Algo_Calibrations_t*)calibration_data_ptr)->distance_offset_c
 163:../HostCommunication/src/EndpointCalibration.c **** 		wr_payload_i16(message_header, 3, ((Algo_Calibrations_t*)calibration_data_ptr)->angle_offset_deg)
 164:../HostCommunication/src/EndpointCalibration.c **** 
 165:../HostCommunication/src/EndpointCalibration.c **** 		/* send message header */
 166:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_header(endpoint, sizeof(message_header));
 167:../HostCommunication/src/EndpointCalibration.c **** 
 168:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_payload(message_header, sizeof(message_header));
 169:../HostCommunication/src/EndpointCalibration.c **** 
 170:../HostCommunication/src/EndpointCalibration.c **** 		protocol_send_tail();
 171:../HostCommunication/src/EndpointCalibration.c **** 	}
 172:../HostCommunication/src/EndpointCalibration.c **** 
 173:../HostCommunication/src/EndpointCalibration.c **** 	return error_code;
 174:../HostCommunication/src/EndpointCalibration.c **** }
 175:../HostCommunication/src/EndpointCalibration.c **** 
 176:../HostCommunication/src/EndpointCalibration.c **** /*
 177:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
 178:../HostCommunication/src/EndpointCalibration.c ****    5. EXPORTED FUNCTIONS
 179:../HostCommunication/src/EndpointCalibration.c **** ==============================================================================
 180:../HostCommunication/src/EndpointCalibration.c ****  */
 181:../HostCommunication/src/EndpointCalibration.c **** 
 182:../HostCommunication/src/EndpointCalibration.c **** uint16_t ep_calibration_handle_message(uint8_t endpoint, uint8_t* message_data, uint16_t num_bytes,
 183:../HostCommunication/src/EndpointCalibration.c **** {
  28              	 .loc 1 183 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 20
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
 184:../HostCommunication/src/EndpointCalibration.c **** 	Radar_Handle_t radar_driver = (Radar_Handle_t) context;
 185:../HostCommunication/src/EndpointCalibration.c **** 
 186:../HostCommunication/src/EndpointCalibration.c **** 	uint16_t error_code;
 187:../HostCommunication/src/EndpointCalibration.c **** 
 188:../HostCommunication/src/EndpointCalibration.c **** 	switch (message_data[0])
  41              	 .loc 1 188 0
  42 0002 0C78     	 ldrb r4,[r1]
  43 0004 013C     	 subs r4,r4,#1
 183:../HostCommunication/src/EndpointCalibration.c **** 	Radar_Handle_t radar_driver = (Radar_Handle_t) context;
  44              	 .loc 1 183 0
  45 0006 87B0     	 sub sp,sp,#28
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 48
 183:../HostCommunication/src/EndpointCalibration.c **** 	Radar_Handle_t radar_driver = (Radar_Handle_t) context;
  48              	 .loc 1 183 0
  49 0008 0646     	 mov r6,r0
  50 000a 1546     	 mov r5,r2
  51              	.LVL1:
  52              	 .loc 1 188 0
  53 000c 0B2C     	 cmp r4,#11
  54 000e 0AD8     	 bhi .L32
  55 0010 DFE804F0 	 tbb [pc,r4]
  56              	.LVL2:
  57              	.L4:
  58 0014 0D       	 .byte (.L3-.L4)/2
  59 0015 16       	 .byte (.L5-.L4)/2
  60 0016 31       	 .byte (.L6-.L4)/2
  61 0017 39       	 .byte (.L7-.L4)/2
  62 0018 42       	 .byte (.L8-.L4)/2
  63 0019 6E       	 .byte (.L9-.L4)/2
  64 001a 76       	 .byte (.L10-.L4)/2
  65 001b 8B       	 .byte (.L11-.L4)/2
  66 001c 9C       	 .byte (.L12-.L4)/2
  67 001d A5       	 .byte (.L13-.L4)/2
  68 001e BB       	 .byte (.L14-.L4)/2
  69 001f 06       	 .byte (.L15-.L4)/2
  70              	 .p2align 1
  71              	.L15:
 189:../HostCommunication/src/EndpointCalibration.c **** 	{
 190:../HostCommunication/src/EndpointCalibration.c **** 
 191:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_GET_ADC_FLASH_CALIBRATION:
 192:../HostCommunication/src/EndpointCalibration.c **** 
 193:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 194:../HostCommunication/src/EndpointCalibration.c **** 		{
 195:../HostCommunication/src/EndpointCalibration.c **** 			error_code = send_adc_calibration_data(endpoint, radar_driver, CALIBRATION_TARGET_FLASH);
 196:../HostCommunication/src/EndpointCalibration.c **** 
 197:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 198:../HostCommunication/src/EndpointCalibration.c **** 		}
 199:../HostCommunication/src/EndpointCalibration.c **** 
 200:../HostCommunication/src/EndpointCalibration.c **** 		break;
 201:../HostCommunication/src/EndpointCalibration.c **** 
 202:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 203:../HostCommunication/src/EndpointCalibration.c **** 
 204:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_GET_ADC_SRAM_CALIBRATION:
 205:../HostCommunication/src/EndpointCalibration.c **** 
 206:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 207:../HostCommunication/src/EndpointCalibration.c **** 		{
 208:../HostCommunication/src/EndpointCalibration.c **** 			error_code = send_adc_calibration_data(endpoint, radar_driver, CALIBRATION_TARGET_SRAM);
 209:../HostCommunication/src/EndpointCalibration.c **** 
 210:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 211:../HostCommunication/src/EndpointCalibration.c **** 		}
 212:../HostCommunication/src/EndpointCalibration.c **** 
 213:../HostCommunication/src/EndpointCalibration.c **** 		break;
 214:../HostCommunication/src/EndpointCalibration.c **** 
 215:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 216:../HostCommunication/src/EndpointCalibration.c **** 
 217:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_SET_ADC_FLASH_CALIBRATION:
 218:../HostCommunication/src/EndpointCalibration.c **** 
 219:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 220:../HostCommunication/src/EndpointCalibration.c **** 		{
 221:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_save_calibration(radar_driver, CALIBRATION_TARGET_FLASH, CALIBRATION_DATA_ADC
 222:../HostCommunication/src/EndpointCalibration.c **** 
 223:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 224:../HostCommunication/src/EndpointCalibration.c **** 		}
 225:../HostCommunication/src/EndpointCalibration.c **** 
 226:../HostCommunication/src/EndpointCalibration.c **** 		break;
 227:../HostCommunication/src/EndpointCalibration.c **** 
 228:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 229:../HostCommunication/src/EndpointCalibration.c **** 
 230:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_SET_ADC_SRAM_CALIBRATION:
 231:../HostCommunication/src/EndpointCalibration.c **** 
 232:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 233:../HostCommunication/src/EndpointCalibration.c **** 		{
 234:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_save_calibration(radar_driver, CALIBRATION_TARGET_SRAM,CALIBRATION_DATA_ADC, 
 235:../HostCommunication/src/EndpointCalibration.c **** 
 236:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 237:../HostCommunication/src/EndpointCalibration.c **** 		}
 238:../HostCommunication/src/EndpointCalibration.c **** 
 239:../HostCommunication/src/EndpointCalibration.c **** 		break;
 240:../HostCommunication/src/EndpointCalibration.c **** 
 241:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 242:../HostCommunication/src/EndpointCalibration.c **** 
 243:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_CLEAR_ADC_FLASH_CALIBRATION:
 244:../HostCommunication/src/EndpointCalibration.c **** 
 245:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 246:../HostCommunication/src/EndpointCalibration.c **** 		{
 247:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_clear_calibration(radar_driver, CALIBRATION_TARGET_FLASH, CALIBRATION_DATA_AD
 248:../HostCommunication/src/EndpointCalibration.c **** 
 249:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 250:../HostCommunication/src/EndpointCalibration.c **** 		}
 251:../HostCommunication/src/EndpointCalibration.c **** 
 252:../HostCommunication/src/EndpointCalibration.c **** 		break;
 253:../HostCommunication/src/EndpointCalibration.c **** 
 254:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 255:../HostCommunication/src/EndpointCalibration.c **** 
 256:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_CLEAR_ADC_SRAM_CALIBRATION:
 257:../HostCommunication/src/EndpointCalibration.c **** 
 258:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 259:../HostCommunication/src/EndpointCalibration.c **** 		{
 260:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_clear_calibration(radar_driver, CALIBRATION_TARGET_SRAM, CALIBRATION_DATA_ADC
 261:../HostCommunication/src/EndpointCalibration.c **** 
 262:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 263:../HostCommunication/src/EndpointCalibration.c **** 		}
 264:../HostCommunication/src/EndpointCalibration.c **** 
 265:../HostCommunication/src/EndpointCalibration.c **** 		break;
 266:../HostCommunication/src/EndpointCalibration.c **** 
 267:../HostCommunication/src/EndpointCalibration.c **** 		//===============================================================
 268:../HostCommunication/src/EndpointCalibration.c **** 
 269:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_GET_ALGO_FLASH_CALIBRATION:
 270:../HostCommunication/src/EndpointCalibration.c **** 
 271:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 272:../HostCommunication/src/EndpointCalibration.c **** 		{
 273:../HostCommunication/src/EndpointCalibration.c **** 			error_code = send_algo_calibration_data(endpoint, radar_driver, CALIBRATION_TARGET_FLASH);
 274:../HostCommunication/src/EndpointCalibration.c **** 
 275:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 276:../HostCommunication/src/EndpointCalibration.c **** 		}
 277:../HostCommunication/src/EndpointCalibration.c **** 
 278:../HostCommunication/src/EndpointCalibration.c **** 		break;
 279:../HostCommunication/src/EndpointCalibration.c **** 
 280:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 281:../HostCommunication/src/EndpointCalibration.c **** 
 282:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_GET_ALGO_SRAM_CALIBRATION:
 283:../HostCommunication/src/EndpointCalibration.c **** 
 284:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 285:../HostCommunication/src/EndpointCalibration.c **** 		{
 286:../HostCommunication/src/EndpointCalibration.c **** 			error_code = send_algo_calibration_data(endpoint, radar_driver, CALIBRATION_TARGET_SRAM);
 287:../HostCommunication/src/EndpointCalibration.c **** 
 288:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 289:../HostCommunication/src/EndpointCalibration.c **** 		}
 290:../HostCommunication/src/EndpointCalibration.c **** 
 291:../HostCommunication/src/EndpointCalibration.c **** 		break;
 292:../HostCommunication/src/EndpointCalibration.c **** 
 293:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 294:../HostCommunication/src/EndpointCalibration.c **** 
 295:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_SET_ALGO_FLASH_CALIBRATION:
 296:../HostCommunication/src/EndpointCalibration.c **** 
 297:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 5)
 298:../HostCommunication/src/EndpointCalibration.c **** 		{
 299:../HostCommunication/src/EndpointCalibration.c **** 			Algo_Calibrations_t algo_calibration_settings;
 300:../HostCommunication/src/EndpointCalibration.c **** 
 301:../HostCommunication/src/EndpointCalibration.c **** 			/* extract parameters from message */
 302:../HostCommunication/src/EndpointCalibration.c **** 
 303:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.distance_offset_cm = rd_payload_u16(message_data, 1);
 304:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.angle_offset_deg   = rd_payload_i16(message_data, 3);
 305:../HostCommunication/src/EndpointCalibration.c **** 
 306:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_save_calibration(radar_driver, CALIBRATION_TARGET_FLASH, CALIBRATION_DATA_ALG
 307:../HostCommunication/src/EndpointCalibration.c **** 
 308:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 309:../HostCommunication/src/EndpointCalibration.c **** 		}
 310:../HostCommunication/src/EndpointCalibration.c **** 
 311:../HostCommunication/src/EndpointCalibration.c **** 		break;
 312:../HostCommunication/src/EndpointCalibration.c **** 
 313:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 314:../HostCommunication/src/EndpointCalibration.c **** 
 315:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_SET_ALGO_SRAM_CALIBRATION:
 316:../HostCommunication/src/EndpointCalibration.c **** 
 317:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 5)
 318:../HostCommunication/src/EndpointCalibration.c **** 		{
 319:../HostCommunication/src/EndpointCalibration.c **** 			Algo_Calibrations_t algo_calibration_settings;
 320:../HostCommunication/src/EndpointCalibration.c **** 
 321:../HostCommunication/src/EndpointCalibration.c **** 			/* extract parameters from message */
 322:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.distance_offset_cm = rd_payload_u16(message_data, 1);
 323:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.angle_offset_deg   = rd_payload_i16(message_data, 3);
 324:../HostCommunication/src/EndpointCalibration.c **** 
 325:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_save_calibration(radar_driver, CALIBRATION_TARGET_SRAM, CALIBRATION_DATA_ALGO
 326:../HostCommunication/src/EndpointCalibration.c **** 
 327:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 328:../HostCommunication/src/EndpointCalibration.c **** 		}
 329:../HostCommunication/src/EndpointCalibration.c **** 
 330:../HostCommunication/src/EndpointCalibration.c **** 		break;
 331:../HostCommunication/src/EndpointCalibration.c **** 
 332:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 333:../HostCommunication/src/EndpointCalibration.c **** 
 334:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_CLEAR_ALGO_FLASH_CALIBRATION:
 335:../HostCommunication/src/EndpointCalibration.c **** 
 336:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
 337:../HostCommunication/src/EndpointCalibration.c **** 		{
 338:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_clear_calibration(radar_driver, CALIBRATION_TARGET_FLASH, CALIBRATION_DATA_AL
 339:../HostCommunication/src/EndpointCalibration.c **** 
 340:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 341:../HostCommunication/src/EndpointCalibration.c **** 		}
 342:../HostCommunication/src/EndpointCalibration.c **** 
 343:../HostCommunication/src/EndpointCalibration.c **** 		break;
 344:../HostCommunication/src/EndpointCalibration.c **** 
 345:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 346:../HostCommunication/src/EndpointCalibration.c **** 
 347:../HostCommunication/src/EndpointCalibration.c **** 	case MSG_CLEAR_ALGO_SRAM_CALIBRATION:
 348:../HostCommunication/src/EndpointCalibration.c **** 
 349:../HostCommunication/src/EndpointCalibration.c **** 		if (num_bytes == 1)
  72              	 .loc 1 349 0
  73 0020 012D     	 cmp r5,#1
  74 0022 00F0DD80 	 beq .L37
  75              	.L32:
 350:../HostCommunication/src/EndpointCalibration.c **** 		{
 351:../HostCommunication/src/EndpointCalibration.c **** 			error_code = radar_clear_calibration(radar_driver, CALIBRATION_TARGET_SRAM, CALIBRATION_DATA_ALG
 352:../HostCommunication/src/EndpointCalibration.c **** 
 353:../HostCommunication/src/EndpointCalibration.c **** 			return error_code;
 354:../HostCommunication/src/EndpointCalibration.c **** 		}
 355:../HostCommunication/src/EndpointCalibration.c **** 
 356:../HostCommunication/src/EndpointCalibration.c **** 		break;
 357:../HostCommunication/src/EndpointCalibration.c **** 
 358:../HostCommunication/src/EndpointCalibration.c **** 		//---------------------------------------------------------------
 359:../HostCommunication/src/EndpointCalibration.c **** 
 360:../HostCommunication/src/EndpointCalibration.c **** 	default:
 361:../HostCommunication/src/EndpointCalibration.c **** 
 362:../HostCommunication/src/EndpointCalibration.c **** 		break;
 363:../HostCommunication/src/EndpointCalibration.c **** 	}
 364:../HostCommunication/src/EndpointCalibration.c **** 
 365:../HostCommunication/src/EndpointCalibration.c **** 	return PROTOCOL_STATUS_INVALID_PAYLOAD;
  76              	 .loc 1 365 0
  77 0026 4FF6FF70 	 movw r0,#65535
  78              	.LVL3:
  79              	.L2:
 366:../HostCommunication/src/EndpointCalibration.c **** }
  80              	 .loc 1 366 0 discriminator 1
  81 002a 07B0     	 add sp,sp,#28
  82              	.LCFI2:
  83              	 .cfi_remember_state
  84              	 .cfi_def_cfa_offset 20
  85              	 
  86 002c F0BD     	 pop {r4,r5,r6,r7,pc}
  87              	.LVL4:
  88              	.L3:
  89              	.LCFI3:
  90              	 .cfi_restore_state
 219:../HostCommunication/src/EndpointCalibration.c **** 		{
  91              	 .loc 1 219 0
  92 002e 012D     	 cmp r5,#1
  93 0030 F9D1     	 bne .L32
 221:../HostCommunication/src/EndpointCalibration.c **** 
  94              	 .loc 1 221 0
  95 0032 0021     	 movs r1,#0
  96              	.LVL5:
  97 0034 1846     	 mov r0,r3
  98              	.LVL6:
  99 0036 0A46     	 mov r2,r1
 100 0038 0B46     	 mov r3,r1
 101              	.LVL7:
 102 003a FFF7FEFF 	 bl radar_save_calibration
 103              	.LVL8:
 223:../HostCommunication/src/EndpointCalibration.c **** 		}
 104              	 .loc 1 223 0
 105 003e F4E7     	 b .L2
 106              	.LVL9:
 107              	.L5:
 193:../HostCommunication/src/EndpointCalibration.c **** 		{
 108              	 .loc 1 193 0
 109 0040 012D     	 cmp r5,#1
 110 0042 F0D1     	 bne .L32
 111              	.LVL10:
 112              	.LBB78:
 113              	.LBB79:
  98:../HostCommunication/src/EndpointCalibration.c **** 
 114              	 .loc 1 98 0
 115 0044 06AA     	 add r2,sp,#24
 116 0046 0021     	 movs r1,#0
 117              	.LVL11:
 118 0048 42F8081D 	 str r1,[r2,#-8]!
 102:../HostCommunication/src/EndpointCalibration.c **** 
 119              	 .loc 1 102 0
 120 004c 0DF10A04 	 add r4,sp,#10
 121 0050 1846     	 mov r0,r3
 122              	.LVL12:
 123 0052 0094     	 str r4,[sp]
 124 0054 1346     	 mov r3,r2
 125              	.LVL13:
 126 0056 0A46     	 mov r2,r1
 127 0058 FFF7FEFF 	 bl radar_read_calibration
 128              	.LVL14:
 104:../HostCommunication/src/EndpointCalibration.c **** 	{
 129              	 .loc 1 104 0
 130 005c 0446     	 mov r4,r0
 131 005e 0028     	 cmp r0,#0
 132 0060 44D1     	 bne .L19
 133              	.LVL15:
 134              	.LBB80:
 118:../HostCommunication/src/EndpointCalibration.c **** 
 135              	 .loc 1 118 0
 136 0062 BDF80A30 	 ldrh r3,[sp,#10]
 137              	.LVL16:
 138              	.LBB81:
 139              	.LBB82:
 140              	 .file 2 "../HostCommunication/src/PayloadHelper.h"
   1:../HostCommunication/src/PayloadHelper.h **** ﻿/**
   2:../HostCommunication/src/PayloadHelper.h ****  * \file PayloadHelper.h
   3:../HostCommunication/src/PayloadHelper.h ****  *
   4:../HostCommunication/src/PayloadHelper.h ****  * \brief This file defines an internal protocol API to be used by endpoint
   5:../HostCommunication/src/PayloadHelper.h ****  *        implementations.
   6:../HostCommunication/src/PayloadHelper.h ****  *
   7:../HostCommunication/src/PayloadHelper.h ****  * This file defines some light weight function that help to access data in
   8:../HostCommunication/src/PayloadHelper.h ****  * protocol payload. Different implementation allow to adapt to the
   9:../HostCommunication/src/PayloadHelper.h ****  * capabilities of the target machine. Special implementations can be chosen
  10:../HostCommunication/src/PayloadHelper.h ****  * by defining the according compile time switch. If none of the available
  11:../HostCommunication/src/PayloadHelper.h ****  * compile time switches is chosen, the default implementation will be used.
  12:../HostCommunication/src/PayloadHelper.h ****  *
  13:../HostCommunication/src/PayloadHelper.h ****  * The default implementation is safe on all target machines and can handle
  14:../HostCommunication/src/PayloadHelper.h ****  * both, big endian CPUs and little endian CPUs. It may be slower than other
  15:../HostCommunication/src/PayloadHelper.h ****  * special implementations.
  16:../HostCommunication/src/PayloadHelper.h ****  *
  17:../HostCommunication/src/PayloadHelper.h ****  * If the compile time switch COMLIB_ALLOW_PAYLOAD_CASTS is set, a special
  18:../HostCommunication/src/PayloadHelper.h ****  * implementation for little endian machines is used, that can access data
  19:../HostCommunication/src/PayloadHelper.h ****  * faster by casting data to the right data type. This implementation works
  20:../HostCommunication/src/PayloadHelper.h ****  * only for CPUs that have no alignment requirement for 16 bit and 32 bit
  21:../HostCommunication/src/PayloadHelper.h ****  * integers.
  22:../HostCommunication/src/PayloadHelper.h ****  */
  23:../HostCommunication/src/PayloadHelper.h **** 
  24:../HostCommunication/src/PayloadHelper.h **** /* ===========================================================================
  25:../HostCommunication/src/PayloadHelper.h **** ** Copyright (C) 2016-2018 Infineon Technologies AG
  26:../HostCommunication/src/PayloadHelper.h **** ** All rights reserved.
  27:../HostCommunication/src/PayloadHelper.h **** ** ===========================================================================
  28:../HostCommunication/src/PayloadHelper.h **** **
  29:../HostCommunication/src/PayloadHelper.h **** ** ===========================================================================
  30:../HostCommunication/src/PayloadHelper.h **** ** This document contains proprietary information of Infineon Technologies AG.
  31:../HostCommunication/src/PayloadHelper.h **** ** Passing on and copying of this document, and communication of its contents
  32:../HostCommunication/src/PayloadHelper.h **** ** is not permitted without Infineon's prior written authorisation.
  33:../HostCommunication/src/PayloadHelper.h **** ** ===========================================================================
  34:../HostCommunication/src/PayloadHelper.h **** */
  35:../HostCommunication/src/PayloadHelper.h **** 
  36:../HostCommunication/src/PayloadHelper.h **** #ifndef HOSTCOMMUNICATION_PAYLOAD_HELPER_H_
  37:../HostCommunication/src/PayloadHelper.h **** #define HOSTCOMMUNICATION_PAYLOAD_HELPER_H_
  38:../HostCommunication/src/PayloadHelper.h **** 
  39:../HostCommunication/src/PayloadHelper.h **** /*
  40:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
  41:../HostCommunication/src/PayloadHelper.h ****    1. INCLUDE FILES
  42:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
  43:../HostCommunication/src/PayloadHelper.h **** */
  44:../HostCommunication/src/PayloadHelper.h **** #include <stdint.h>
  45:../HostCommunication/src/PayloadHelper.h **** 
  46:../HostCommunication/src/PayloadHelper.h **** /*
  47:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
  48:../HostCommunication/src/PayloadHelper.h ****    2. FUNCTION PROTOTYPES AND INLINE FUNCTIONS
  49:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
  50:../HostCommunication/src/PayloadHelper.h **** */
  51:../HostCommunication/src/PayloadHelper.h **** 
  52:../HostCommunication/src/PayloadHelper.h **** /**
  53:../HostCommunication/src/PayloadHelper.h ****  * \internal
  54:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts a signed 8 bit integer from a payload buffer.
  55:../HostCommunication/src/PayloadHelper.h ****  *
  56:../HostCommunication/src/PayloadHelper.h ****  * The function reads one byte from the given payload buffer at the requested
  57:../HostCommunication/src/PayloadHelper.h ****  * position and interprets it as a signed 8 bit integer value, which will be
  58:../HostCommunication/src/PayloadHelper.h ****  * returned.
  59:../HostCommunication/src/PayloadHelper.h ****  *
  60:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
  61:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
  62:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
  63:../HostCommunication/src/PayloadHelper.h ****  *
  64:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
  65:../HostCommunication/src/PayloadHelper.h ****  */
  66:../HostCommunication/src/PayloadHelper.h **** static inline int8_t rd_payload_i8(const uint8_t* payload, uint16_t offset)
  67:../HostCommunication/src/PayloadHelper.h **** {
  68:../HostCommunication/src/PayloadHelper.h ****     return (int8_t)payload[offset];
  69:../HostCommunication/src/PayloadHelper.h **** }
  70:../HostCommunication/src/PayloadHelper.h **** 
  71:../HostCommunication/src/PayloadHelper.h **** /**
  72:../HostCommunication/src/PayloadHelper.h ****  * \internal
  73:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts an unsigned 8 bit integer from a payload
  74:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
  75:../HostCommunication/src/PayloadHelper.h ****  *
  76:../HostCommunication/src/PayloadHelper.h ****  * The function reads one byte from the given payload buffer at the requested
  77:../HostCommunication/src/PayloadHelper.h ****  * position and interprets it as an unsigned 8 bit integer value, which will
  78:../HostCommunication/src/PayloadHelper.h ****  * be returned.
  79:../HostCommunication/src/PayloadHelper.h ****  *
  80:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
  81:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
  82:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
  83:../HostCommunication/src/PayloadHelper.h ****  *
  84:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
  85:../HostCommunication/src/PayloadHelper.h ****  */
  86:../HostCommunication/src/PayloadHelper.h **** static inline uint8_t rd_payload_u8(const uint8_t* payload, uint16_t offset)
  87:../HostCommunication/src/PayloadHelper.h **** {
  88:../HostCommunication/src/PayloadHelper.h ****     return payload[offset];
  89:../HostCommunication/src/PayloadHelper.h **** }
  90:../HostCommunication/src/PayloadHelper.h **** 
  91:../HostCommunication/src/PayloadHelper.h **** /**
  92:../HostCommunication/src/PayloadHelper.h ****  * \internal
  93:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts a signed 16 bit integer from a payload buffer.
  94:../HostCommunication/src/PayloadHelper.h ****  *
  95:../HostCommunication/src/PayloadHelper.h ****  * The function reads two bytes from the given payload buffer starting at the
  96:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as a signed 16 bit integer value,
  97:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
  98:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
  99:../HostCommunication/src/PayloadHelper.h ****  *
 100:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 101:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 102:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 103:../HostCommunication/src/PayloadHelper.h ****  *
 104:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 105:../HostCommunication/src/PayloadHelper.h ****  */
 106:../HostCommunication/src/PayloadHelper.h **** static inline int16_t rd_payload_i16(const uint8_t* payload, uint16_t offset);
 107:../HostCommunication/src/PayloadHelper.h **** 
 108:../HostCommunication/src/PayloadHelper.h **** /**
 109:../HostCommunication/src/PayloadHelper.h ****  * \internal
 110:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts an unsigned 16 bit integer from a payload
 111:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 112:../HostCommunication/src/PayloadHelper.h ****  *
 113:../HostCommunication/src/PayloadHelper.h ****  * The function reads two bytes from the given payload buffer starting at the
 114:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as an unsigned 16 bit integer value,
 115:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
 116:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
 117:../HostCommunication/src/PayloadHelper.h ****  *
 118:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 119:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 120:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 121:../HostCommunication/src/PayloadHelper.h ****  *
 122:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 123:../HostCommunication/src/PayloadHelper.h ****  */
 124:../HostCommunication/src/PayloadHelper.h **** static inline uint16_t rd_payload_u16(const uint8_t* payload,
 125:../HostCommunication/src/PayloadHelper.h ****                                       uint16_t offset);
 126:../HostCommunication/src/PayloadHelper.h **** 
 127:../HostCommunication/src/PayloadHelper.h **** /**
 128:../HostCommunication/src/PayloadHelper.h ****  * \internal
 129:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts a signed 32 bit integer from a payload buffer.
 130:../HostCommunication/src/PayloadHelper.h ****  *
 131:../HostCommunication/src/PayloadHelper.h ****  * The function reads four bytes from the given payload buffer starting at the
 132:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as a signed 32 bit integer value,
 133:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
 134:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
 135:../HostCommunication/src/PayloadHelper.h ****  *
 136:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 137:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 138:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 139:../HostCommunication/src/PayloadHelper.h ****  *
 140:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 141:../HostCommunication/src/PayloadHelper.h ****  */
 142:../HostCommunication/src/PayloadHelper.h **** static inline int32_t rd_payload_i32(const uint8_t* payload, uint16_t offset);
 143:../HostCommunication/src/PayloadHelper.h **** 
 144:../HostCommunication/src/PayloadHelper.h **** /**
 145:../HostCommunication/src/PayloadHelper.h ****  * \internal
 146:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts an unsigned 32 bit integer from a payload
 147:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 148:../HostCommunication/src/PayloadHelper.h ****  *
 149:../HostCommunication/src/PayloadHelper.h ****  * The function reads four bytes from the given payload buffer starting at the
 150:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as an unsigned 32 bit integer value,
 151:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
 152:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
 153:../HostCommunication/src/PayloadHelper.h ****  *
 154:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 155:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 156:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 157:../HostCommunication/src/PayloadHelper.h ****  *
 158:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 159:../HostCommunication/src/PayloadHelper.h ****  */
 160:../HostCommunication/src/PayloadHelper.h **** static inline uint32_t rd_payload_u32(const uint8_t* payload,
 161:../HostCommunication/src/PayloadHelper.h ****                                       uint16_t offset);
 162:../HostCommunication/src/PayloadHelper.h **** 
 163:../HostCommunication/src/PayloadHelper.h **** /**
 164:../HostCommunication/src/PayloadHelper.h ****  * \internal
 165:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts a signed 64 bit integer from a payload buffer.
 166:../HostCommunication/src/PayloadHelper.h ****  *
 167:../HostCommunication/src/PayloadHelper.h ****  * The function reads four bytes from the given payload buffer starting at the
 168:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as a signed 64 bit integer value,
 169:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
 170:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
 171:../HostCommunication/src/PayloadHelper.h ****  *
 172:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 173:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 174:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 175:../HostCommunication/src/PayloadHelper.h ****  *
 176:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 177:../HostCommunication/src/PayloadHelper.h ****  */
 178:../HostCommunication/src/PayloadHelper.h **** static inline int64_t rd_payload_i64(const uint8_t* payload, uint16_t offset);
 179:../HostCommunication/src/PayloadHelper.h **** 
 180:../HostCommunication/src/PayloadHelper.h **** /**
 181:../HostCommunication/src/PayloadHelper.h ****  * \internal
 182:../HostCommunication/src/PayloadHelper.h ****  * \brief The function extracts an unsigned 64 bit integer from a payload
 183:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 184:../HostCommunication/src/PayloadHelper.h ****  *
 185:../HostCommunication/src/PayloadHelper.h ****  * The function reads four bytes from the given payload buffer starting at the
 186:../HostCommunication/src/PayloadHelper.h ****  * requested position and interprets them as an unsigned 64 bit integer value,
 187:../HostCommunication/src/PayloadHelper.h ****  * which will be returned. If needed the byte order is swapped to convert from
 188:../HostCommunication/src/PayloadHelper.h ****  * the payload's little endian format to the CPU's endian format.
 189:../HostCommunication/src/PayloadHelper.h ****  *
 190:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 191:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the requested data value
 192:../HostCommunication/src/PayloadHelper.h ****  *                     starts.
 193:../HostCommunication/src/PayloadHelper.h ****  *
 194:../HostCommunication/src/PayloadHelper.h ****  * \return The function returns the value read from the payload.
 195:../HostCommunication/src/PayloadHelper.h ****  */
 196:../HostCommunication/src/PayloadHelper.h **** static inline uint64_t rd_payload_u64(const uint8_t* payload,
 197:../HostCommunication/src/PayloadHelper.h ****                                       uint16_t offset);
 198:../HostCommunication/src/PayloadHelper.h **** 
 199:../HostCommunication/src/PayloadHelper.h **** /**
 200:../HostCommunication/src/PayloadHelper.h ****  * \internal
 201:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes a signed 8 bit integer value to a payload
 202:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 203:../HostCommunication/src/PayloadHelper.h ****  *
 204:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 205:../HostCommunication/src/PayloadHelper.h ****  * requested position.
 206:../HostCommunication/src/PayloadHelper.h ****  *
 207:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 208:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 209:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 210:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 211:../HostCommunication/src/PayloadHelper.h ****  */
 212:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i8(uint8_t* payload, uint16_t offset,
 213:../HostCommunication/src/PayloadHelper.h ****                                  int8_t value)
 214:../HostCommunication/src/PayloadHelper.h **** {
 215:../HostCommunication/src/PayloadHelper.h ****     payload[offset] = (uint8_t)value;
 216:../HostCommunication/src/PayloadHelper.h **** }
 217:../HostCommunication/src/PayloadHelper.h **** 
 218:../HostCommunication/src/PayloadHelper.h **** /**
 219:../HostCommunication/src/PayloadHelper.h ****  * \internal
 220:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes an unsigned 8 bit integer value to a payload
 221:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 222:../HostCommunication/src/PayloadHelper.h ****  *
 223:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 224:../HostCommunication/src/PayloadHelper.h ****  * requested position.
 225:../HostCommunication/src/PayloadHelper.h ****  *
 226:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 227:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 228:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 229:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 230:../HostCommunication/src/PayloadHelper.h ****  */
 231:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u8(uint8_t* payload, uint16_t offset,
 232:../HostCommunication/src/PayloadHelper.h ****                                  uint8_t value)
 233:../HostCommunication/src/PayloadHelper.h **** {
 234:../HostCommunication/src/PayloadHelper.h ****     payload[offset] = value;
 235:../HostCommunication/src/PayloadHelper.h **** }
 236:../HostCommunication/src/PayloadHelper.h **** 
 237:../HostCommunication/src/PayloadHelper.h **** /**
 238:../HostCommunication/src/PayloadHelper.h ****  * \internal
 239:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes a signed 16 bit integer value to a payload
 240:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 241:../HostCommunication/src/PayloadHelper.h ****  *
 242:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 243:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 244:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 245:../HostCommunication/src/PayloadHelper.h ****  *
 246:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 247:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 248:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 249:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 250:../HostCommunication/src/PayloadHelper.h ****  */
 251:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i16(uint8_t* payload, uint16_t offset,
 252:../HostCommunication/src/PayloadHelper.h ****                                   int16_t value);
 253:../HostCommunication/src/PayloadHelper.h **** 
 254:../HostCommunication/src/PayloadHelper.h **** /**
 255:../HostCommunication/src/PayloadHelper.h ****  * \internal
 256:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes an unsigned 16 bit integer value to a payload
 257:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 258:../HostCommunication/src/PayloadHelper.h ****  *
 259:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 260:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 261:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 262:../HostCommunication/src/PayloadHelper.h ****  *
 263:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 264:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 265:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 266:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 267:../HostCommunication/src/PayloadHelper.h ****  */
 268:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u16(uint8_t* payload, uint16_t offset,
 269:../HostCommunication/src/PayloadHelper.h ****                                   uint16_t value);
 270:../HostCommunication/src/PayloadHelper.h **** 
 271:../HostCommunication/src/PayloadHelper.h **** /**
 272:../HostCommunication/src/PayloadHelper.h ****  * \internal
 273:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes a signed 32 bit integer value to a payload
 274:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 275:../HostCommunication/src/PayloadHelper.h ****  *
 276:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 277:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 278:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 279:../HostCommunication/src/PayloadHelper.h ****  *
 280:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 281:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 282:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 283:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 284:../HostCommunication/src/PayloadHelper.h ****  */
 285:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i32(uint8_t* payload, uint16_t offset,
 286:../HostCommunication/src/PayloadHelper.h ****                                   int32_t value);
 287:../HostCommunication/src/PayloadHelper.h **** 
 288:../HostCommunication/src/PayloadHelper.h **** /**
 289:../HostCommunication/src/PayloadHelper.h ****  * \internal
 290:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes an unsigned 32 bit integer value to a payload
 291:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 292:../HostCommunication/src/PayloadHelper.h ****  *
 293:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 294:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 295:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 296:../HostCommunication/src/PayloadHelper.h ****  *
 297:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 298:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 299:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 300:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 301:../HostCommunication/src/PayloadHelper.h ****  */
 302:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u32(uint8_t* payload, uint16_t offset,
 303:../HostCommunication/src/PayloadHelper.h ****                                   uint32_t value);
 304:../HostCommunication/src/PayloadHelper.h **** 
 305:../HostCommunication/src/PayloadHelper.h **** /**
 306:../HostCommunication/src/PayloadHelper.h ****  * \internal
 307:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes a signed 64 bit integer value to a payload
 308:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 309:../HostCommunication/src/PayloadHelper.h ****  *
 310:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 311:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 312:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 313:../HostCommunication/src/PayloadHelper.h ****  *
 314:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 315:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 316:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 317:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 318:../HostCommunication/src/PayloadHelper.h ****  */
 319:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i64(uint8_t* payload, uint16_t offset,
 320:../HostCommunication/src/PayloadHelper.h ****                                   int64_t value);
 321:../HostCommunication/src/PayloadHelper.h **** 
 322:../HostCommunication/src/PayloadHelper.h **** /**
 323:../HostCommunication/src/PayloadHelper.h ****  * \internal
 324:../HostCommunication/src/PayloadHelper.h ****  * \brief The function writes an unsigned 64 bit integer value to a payload
 325:../HostCommunication/src/PayloadHelper.h ****  *        buffer.
 326:../HostCommunication/src/PayloadHelper.h ****  *
 327:../HostCommunication/src/PayloadHelper.h ****  * The function writes the given value into the given payload buffer at the
 328:../HostCommunication/src/PayloadHelper.h ****  * requested position. If needed the byte order is swapped to convert from the
 329:../HostCommunication/src/PayloadHelper.h ****  * payload's little endian format to the CPU's endian format.
 330:../HostCommunication/src/PayloadHelper.h ****  *
 331:../HostCommunication/src/PayloadHelper.h ****  * \param[in] payload  A pointer to a block of payload data.
 332:../HostCommunication/src/PayloadHelper.h ****  * \param[in] offset   The byte position at which the value will be written
 333:../HostCommunication/src/PayloadHelper.h ****  *                     to.
 334:../HostCommunication/src/PayloadHelper.h ****  * \param[in] value    The value to be written into the payload buffer.
 335:../HostCommunication/src/PayloadHelper.h ****  */
 336:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u64(uint8_t* payload, uint16_t offset,
 337:../HostCommunication/src/PayloadHelper.h ****                                   uint64_t value);
 338:../HostCommunication/src/PayloadHelper.h **** /*
 339:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
 340:../HostCommunication/src/PayloadHelper.h ****    3. INLINE FUNCTIONS
 341:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
 342:../HostCommunication/src/PayloadHelper.h **** */
 343:../HostCommunication/src/PayloadHelper.h **** #ifdef COMLIB_ALLOW_PAYLOAD_CASTS
 344:../HostCommunication/src/PayloadHelper.h **** /*
 345:../HostCommunication/src/PayloadHelper.h ****  * The following function implementations wan only be used on machines with
 346:../HostCommunication/src/PayloadHelper.h ****  * little endian CPUs, but are faster than the generic implementations.
 347:../HostCommunication/src/PayloadHelper.h ****  */
 348:../HostCommunication/src/PayloadHelper.h **** 
 349:../HostCommunication/src/PayloadHelper.h **** static inline int16_t rd_payload_i16(const uint8_t* payload, uint16_t offset)
 350:../HostCommunication/src/PayloadHelper.h **** {
 351:../HostCommunication/src/PayloadHelper.h ****     return *(int16_t*)(payload + offset);
 352:../HostCommunication/src/PayloadHelper.h **** }
 353:../HostCommunication/src/PayloadHelper.h **** 
 354:../HostCommunication/src/PayloadHelper.h **** static inline uint16_t rd_payload_u16(const uint8_t* payload, uint16_t offset)
 355:../HostCommunication/src/PayloadHelper.h **** {
 356:../HostCommunication/src/PayloadHelper.h ****     return *(uint16_t*)(payload + offset);
 357:../HostCommunication/src/PayloadHelper.h **** }
 358:../HostCommunication/src/PayloadHelper.h **** 
 359:../HostCommunication/src/PayloadHelper.h **** static inline int32_t rd_payload_i32(const uint8_t* payload, uint16_t offset)
 360:../HostCommunication/src/PayloadHelper.h **** {
 361:../HostCommunication/src/PayloadHelper.h ****     return *(int32_t*)(payload + offset);
 362:../HostCommunication/src/PayloadHelper.h **** }
 363:../HostCommunication/src/PayloadHelper.h **** 
 364:../HostCommunication/src/PayloadHelper.h **** static inline uint32_t rd_payload_u32(const uint8_t* payload, uint16_t offset)
 365:../HostCommunication/src/PayloadHelper.h **** {
 366:../HostCommunication/src/PayloadHelper.h ****     return *(uint32_t*)(payload + offset);
 367:../HostCommunication/src/PayloadHelper.h **** }
 368:../HostCommunication/src/PayloadHelper.h **** 
 369:../HostCommunication/src/PayloadHelper.h **** static inline int64_t rd_payload_i64(const uint8_t* payload, uint16_t offset)
 370:../HostCommunication/src/PayloadHelper.h **** {
 371:../HostCommunication/src/PayloadHelper.h ****     union
 372:../HostCommunication/src/PayloadHelper.h ****     {
 373:../HostCommunication/src/PayloadHelper.h ****         uint32_t u32[2];
 374:../HostCommunication/src/PayloadHelper.h ****         int64_t i64;
 375:../HostCommunication/src/PayloadHelper.h ****     } value;
 376:../HostCommunication/src/PayloadHelper.h ****     value.u32[0] = *(uint32_t*)(payload + offset);
 377:../HostCommunication/src/PayloadHelper.h ****     value.u32[1] = *(uint32_t*)(payload + offset + 4);
 378:../HostCommunication/src/PayloadHelper.h **** 
 379:../HostCommunication/src/PayloadHelper.h ****     return value.i64;
 380:../HostCommunication/src/PayloadHelper.h **** }
 381:../HostCommunication/src/PayloadHelper.h **** 
 382:../HostCommunication/src/PayloadHelper.h **** static inline uint64_t rd_payload_u64(const uint8_t* payload, uint16_t offset)
 383:../HostCommunication/src/PayloadHelper.h **** {
 384:../HostCommunication/src/PayloadHelper.h ****     union
 385:../HostCommunication/src/PayloadHelper.h ****     {
 386:../HostCommunication/src/PayloadHelper.h ****         uint32_t u32[2];
 387:../HostCommunication/src/PayloadHelper.h ****         uint64_t u64;
 388:../HostCommunication/src/PayloadHelper.h ****     } value;
 389:../HostCommunication/src/PayloadHelper.h ****     value.u32[0] = *(uint32_t*)(payload + offset);
 390:../HostCommunication/src/PayloadHelper.h ****     value.u32[1] = *(uint32_t*)(payload + offset + 4);
 391:../HostCommunication/src/PayloadHelper.h **** 
 392:../HostCommunication/src/PayloadHelper.h ****     return value.u64;
 393:../HostCommunication/src/PayloadHelper.h **** }
 394:../HostCommunication/src/PayloadHelper.h **** 
 395:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i16(uint8_t* payload, uint16_t offset,
 396:../HostCommunication/src/PayloadHelper.h ****                                   int16_t iValue)
 397:../HostCommunication/src/PayloadHelper.h **** {
 398:../HostCommunication/src/PayloadHelper.h ****     *(int16_t*)(payload + offset) = iValue;
 399:../HostCommunication/src/PayloadHelper.h **** }
 400:../HostCommunication/src/PayloadHelper.h **** 
 401:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u16(uint8_t* payload, uint16_t offset,
 402:../HostCommunication/src/PayloadHelper.h ****                                   uint16_t value)
 403:../HostCommunication/src/PayloadHelper.h **** {
 404:../HostCommunication/src/PayloadHelper.h ****     *(uint16_t*)(payload + offset) = value;
 405:../HostCommunication/src/PayloadHelper.h **** }
 406:../HostCommunication/src/PayloadHelper.h **** 
 407:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i32(uint8_t* payload, uint16_t offset,
 408:../HostCommunication/src/PayloadHelper.h ****                                   int32_t value)
 409:../HostCommunication/src/PayloadHelper.h **** {
 410:../HostCommunication/src/PayloadHelper.h ****     *(int32_t*)(payload + offset) = value;
 411:../HostCommunication/src/PayloadHelper.h **** }
 412:../HostCommunication/src/PayloadHelper.h **** 
 413:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u32(uint8_t* payload, uint16_t offset,
 414:../HostCommunication/src/PayloadHelper.h ****                                   uint32_t value)
 415:../HostCommunication/src/PayloadHelper.h **** {
 416:../HostCommunication/src/PayloadHelper.h ****     *(uint32_t*)(payload + offset) = value;
 417:../HostCommunication/src/PayloadHelper.h **** }
 418:../HostCommunication/src/PayloadHelper.h **** 
 419:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i64(uint8_t* payload, uint16_t offset,
 420:../HostCommunication/src/PayloadHelper.h ****                                   int64_t value)
 421:../HostCommunication/src/PayloadHelper.h **** {
 422:../HostCommunication/src/PayloadHelper.h ****     union
 423:../HostCommunication/src/PayloadHelper.h ****     {
 424:../HostCommunication/src/PayloadHelper.h ****         uint32_t u32[2];
 425:../HostCommunication/src/PayloadHelper.h ****         int64_t i64;
 426:../HostCommunication/src/PayloadHelper.h ****     } value_;
 427:../HostCommunication/src/PayloadHelper.h ****     value_.i64 = value;
 428:../HostCommunication/src/PayloadHelper.h ****     *(uint32_t*)(payload + offset)     = value_.u32[0];
 429:../HostCommunication/src/PayloadHelper.h ****     *(uint32_t*)(payload + offset + 4) = value_.u32[1];
 430:../HostCommunication/src/PayloadHelper.h **** }
 431:../HostCommunication/src/PayloadHelper.h **** 
 432:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u64(uint8_t* payload, uint16_t offset,
 433:../HostCommunication/src/PayloadHelper.h ****                                   uint64_t value)
 434:../HostCommunication/src/PayloadHelper.h **** {
 435:../HostCommunication/src/PayloadHelper.h ****     union
 436:../HostCommunication/src/PayloadHelper.h ****     {
 437:../HostCommunication/src/PayloadHelper.h ****         uint32_t u32[2];
 438:../HostCommunication/src/PayloadHelper.h ****         uint64_t u64;
 439:../HostCommunication/src/PayloadHelper.h ****     } value_;
 440:../HostCommunication/src/PayloadHelper.h ****     value_.u64 = value;
 441:../HostCommunication/src/PayloadHelper.h ****     *(uint32_t*)(payload + offset)     = value_.u32[0];
 442:../HostCommunication/src/PayloadHelper.h ****     *(uint32_t*)(payload + offset + 4) = value_.u32[1];
 443:../HostCommunication/src/PayloadHelper.h **** }
 444:../HostCommunication/src/PayloadHelper.h **** 
 445:../HostCommunication/src/PayloadHelper.h **** /*
 446:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
 447:../HostCommunication/src/PayloadHelper.h ****    4. INLINE FUNCTIONS
 448:../HostCommunication/src/PayloadHelper.h **** ==============================================================================
 449:../HostCommunication/src/PayloadHelper.h **** */
 450:../HostCommunication/src/PayloadHelper.h **** #else
 451:../HostCommunication/src/PayloadHelper.h **** /*
 452:../HostCommunication/src/PayloadHelper.h ****  * The following function implementations are safe on any platform, but slower
 453:../HostCommunication/src/PayloadHelper.h ****  * than the native little endian implementations.
 454:../HostCommunication/src/PayloadHelper.h ****  */
 455:../HostCommunication/src/PayloadHelper.h **** 
 456:../HostCommunication/src/PayloadHelper.h **** static inline int16_t rd_payload_i16(const uint8_t* payload, uint16_t offset)
 457:../HostCommunication/src/PayloadHelper.h **** {
 458:../HostCommunication/src/PayloadHelper.h ****     return (int16_t)((((uint16_t)payload[offset + 1]) <<  8) |
 459:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 460:../HostCommunication/src/PayloadHelper.h **** }
 461:../HostCommunication/src/PayloadHelper.h **** 
 462:../HostCommunication/src/PayloadHelper.h **** static inline uint16_t rd_payload_u16(const uint8_t* payload, uint16_t offset)
 463:../HostCommunication/src/PayloadHelper.h **** {
 464:../HostCommunication/src/PayloadHelper.h ****     return (((uint16_t)payload[offset + 1]) <<  8) |
 465:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 466:../HostCommunication/src/PayloadHelper.h **** }
 467:../HostCommunication/src/PayloadHelper.h **** 
 468:../HostCommunication/src/PayloadHelper.h **** static inline int32_t rd_payload_i32(const uint8_t* payload, uint16_t offset)
 469:../HostCommunication/src/PayloadHelper.h **** {
 470:../HostCommunication/src/PayloadHelper.h ****     return (int32_t)((((uint32_t)payload[offset + 3]) << 24) |
 471:../HostCommunication/src/PayloadHelper.h ****                      (((uint32_t)payload[offset + 2]) << 16) |
 472:../HostCommunication/src/PayloadHelper.h ****                      (((uint32_t)payload[offset + 1]) <<  8) |
 473:../HostCommunication/src/PayloadHelper.h ****                       ((uint32_t)payload[offset    ]));
 474:../HostCommunication/src/PayloadHelper.h **** }
 475:../HostCommunication/src/PayloadHelper.h **** 
 476:../HostCommunication/src/PayloadHelper.h **** static inline uint32_t rd_payload_u32(const uint8_t* payload, uint16_t offset)
 477:../HostCommunication/src/PayloadHelper.h **** {
 478:../HostCommunication/src/PayloadHelper.h ****     return (((uint32_t)payload[offset + 3]) << 24) |
 479:../HostCommunication/src/PayloadHelper.h ****            (((uint32_t)payload[offset + 2]) << 16) |
 480:../HostCommunication/src/PayloadHelper.h ****            (((uint32_t)payload[offset + 1]) <<  8) |
 481:../HostCommunication/src/PayloadHelper.h ****             ((uint32_t)payload[offset    ]);
 482:../HostCommunication/src/PayloadHelper.h **** }
 483:../HostCommunication/src/PayloadHelper.h **** 
 484:../HostCommunication/src/PayloadHelper.h **** static inline int64_t rd_payload_i64(const uint8_t* payload, uint16_t offset)
 485:../HostCommunication/src/PayloadHelper.h **** {
 486:../HostCommunication/src/PayloadHelper.h ****     return (int64_t)((((uint64_t)payload[offset + 7]) << 56) |
 487:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 6]) << 48) |
 488:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 5]) << 40) |
 489:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 4]) << 32) |
 490:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 3]) << 24) |
 491:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 2]) << 16) |
 492:../HostCommunication/src/PayloadHelper.h ****                      (((uint64_t)payload[offset + 1]) <<  8) |
 493:../HostCommunication/src/PayloadHelper.h ****                       ((uint64_t)payload[offset    ]));
 494:../HostCommunication/src/PayloadHelper.h **** }
 495:../HostCommunication/src/PayloadHelper.h **** 
 496:../HostCommunication/src/PayloadHelper.h **** static inline uint64_t rd_payload_u64(const uint8_t* payload, uint16_t offset)
 497:../HostCommunication/src/PayloadHelper.h **** {
 498:../HostCommunication/src/PayloadHelper.h ****     return (((uint64_t)payload[offset + 7]) << 56) |
 499:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 6]) << 48) |
 500:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 5]) << 40) |
 501:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 4]) << 32) |
 502:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 3]) << 24) |
 503:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 2]) << 16) |
 504:../HostCommunication/src/PayloadHelper.h ****            (((uint64_t)payload[offset + 1]) <<  8) |
 505:../HostCommunication/src/PayloadHelper.h ****             ((uint64_t)payload[offset    ]);
 506:../HostCommunication/src/PayloadHelper.h **** }
 507:../HostCommunication/src/PayloadHelper.h **** 
 508:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_i16(uint8_t* payload, uint16_t offset,
 509:../HostCommunication/src/PayloadHelper.h ****                                   int16_t value)
 510:../HostCommunication/src/PayloadHelper.h **** {
 511:../HostCommunication/src/PayloadHelper.h ****     payload[offset + 1] = (((uint16_t)value) >>  8) & 0xFF;
 512:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  ((uint16_t)value)        & 0xFF;
 513:../HostCommunication/src/PayloadHelper.h **** }
 514:../HostCommunication/src/PayloadHelper.h **** 
 515:../HostCommunication/src/PayloadHelper.h **** static inline void wr_payload_u16(uint8_t* payload, uint16_t offset,
 516:../HostCommunication/src/PayloadHelper.h ****                                   uint16_t value)
 517:../HostCommunication/src/PayloadHelper.h **** {
 518:../HostCommunication/src/PayloadHelper.h ****     payload[offset + 1] = (value >>  8) & 0xFF;
 519:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  value        & 0xFF;
 141              	 .loc 2 519 0
 142 0066 8DF80D30 	 strb r3,[sp,#13]
 143              	.LBE82:
 144              	.LBE81:
 121:../HostCommunication/src/EndpointCalibration.c **** 
 145              	 .loc 1 121 0
 146 006a D91C     	 adds r1,r3,#3
 147 006c 3046     	 mov r0,r6
 148              	.LVL17:
 149 006e 89B2     	 uxth r1,r1
 150              	.LBB84:
 151              	.LBB83:
 518:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  value        & 0xFF;
 152              	 .loc 2 518 0
 153 0070 1B0A     	 lsrs r3,r3,#8
 154              	.LVL18:
 155              	.LBE83:
 156              	.LBE84:
 157              	.LBB85:
 158              	.LBB86:
 234:../HostCommunication/src/PayloadHelper.h **** }
 159              	 .loc 2 234 0
 160 0072 0222     	 movs r2,#2
 161 0074 29E0     	 b .L35
 162              	.LVL19:
 163              	.L6:
 164              	.LBE86:
 165              	.LBE85:
 166              	.LBE80:
 167              	.LBE79:
 168              	.LBE78:
 245:../HostCommunication/src/EndpointCalibration.c **** 		{
 169              	 .loc 1 245 0
 170 0076 012D     	 cmp r5,#1
 171 0078 D5D1     	 bne .L32
 247:../HostCommunication/src/EndpointCalibration.c **** 
 172              	 .loc 1 247 0
 173 007a 0021     	 movs r1,#0
 174              	.LVL20:
 175 007c 1846     	 mov r0,r3
 176              	.LVL21:
 177 007e 0A46     	 mov r2,r1
 178 0080 FFF7FEFF 	 bl radar_clear_calibration
 179              	.LVL22:
 249:../HostCommunication/src/EndpointCalibration.c **** 		}
 180              	 .loc 1 249 0
 181 0084 D1E7     	 b .L2
 182              	.LVL23:
 183              	.L7:
 232:../HostCommunication/src/EndpointCalibration.c **** 		{
 184              	 .loc 1 232 0
 185 0086 012D     	 cmp r5,#1
 186 0088 CDD1     	 bne .L32
 234:../HostCommunication/src/EndpointCalibration.c **** 
 187              	 .loc 1 234 0
 188 008a 0022     	 movs r2,#0
 189 008c 1846     	 mov r0,r3
 190              	.LVL24:
 191 008e 2946     	 mov r1,r5
 192              	.LVL25:
 193 0090 1346     	 mov r3,r2
 194              	.LVL26:
 195 0092 FFF7FEFF 	 bl radar_save_calibration
 196              	.LVL27:
 236:../HostCommunication/src/EndpointCalibration.c **** 		}
 197              	 .loc 1 236 0
 198 0096 C8E7     	 b .L2
 199              	.LVL28:
 200              	.L8:
 206:../HostCommunication/src/EndpointCalibration.c **** 		{
 201              	 .loc 1 206 0
 202 0098 012D     	 cmp r5,#1
 203 009a C4D1     	 bne .L32
 204              	.LVL29:
 205              	.LBB87:
 206              	.LBB88:
  98:../HostCommunication/src/EndpointCalibration.c **** 
 207              	 .loc 1 98 0
 208 009c 06AC     	 add r4,sp,#24
 209 009e 0022     	 movs r2,#0
 210 00a0 44F8082D 	 str r2,[r4,#-8]!
 102:../HostCommunication/src/EndpointCalibration.c **** 
 211              	 .loc 1 102 0
 212 00a4 0DF10A07 	 add r7,sp,#10
 213 00a8 1846     	 mov r0,r3
 214              	.LVL30:
 215 00aa 2946     	 mov r1,r5
 216              	.LVL31:
 217 00ac 2346     	 mov r3,r4
 218              	.LVL32:
 219 00ae 0097     	 str r7,[sp]
 220 00b0 FFF7FEFF 	 bl radar_read_calibration
 221              	.LVL33:
 104:../HostCommunication/src/EndpointCalibration.c **** 	{
 222              	 .loc 1 104 0
 223 00b4 0446     	 mov r4,r0
 224 00b6 C8B9     	 cbnz r0,.L19
 225              	.LVL34:
 226              	.LBB89:
 118:../HostCommunication/src/EndpointCalibration.c **** 
 227              	 .loc 1 118 0
 228 00b8 BDF80A30 	 ldrh r3,[sp,#10]
 229              	.LVL35:
 230              	.LBB90:
 231              	.LBB91:
 232              	 .loc 2 519 0
 233 00bc 8DF80D30 	 strb r3,[sp,#13]
 234              	.LBE91:
 235              	.LBE90:
 121:../HostCommunication/src/EndpointCalibration.c **** 
 236              	 .loc 1 121 0
 237 00c0 D91C     	 adds r1,r3,#3
 238 00c2 3046     	 mov r0,r6
 239              	.LVL36:
 240 00c4 89B2     	 uxth r1,r1
 241              	.LBB94:
 242              	.LBB92:
 518:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  value        & 0xFF;
 243              	 .loc 2 518 0
 244 00c6 1B0A     	 lsrs r3,r3,#8
 245              	.LVL37:
 246              	.LBE92:
 247              	.LBE94:
 248              	.LBB95:
 249              	.LBB96:
 234:../HostCommunication/src/PayloadHelper.h **** }
 250              	 .loc 2 234 0
 251 00c8 0522     	 movs r2,#5
 252              	.LVL38:
 253              	.L35:
 254              	.LBE96:
 255              	.LBE95:
 256              	.LBB98:
 257              	.LBB93:
 518:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  value        & 0xFF;
 258              	 .loc 2 518 0
 259 00ca 8DF80E30 	 strb r3,[sp,#14]
 260              	.LBE93:
 261              	.LBE98:
 262              	.LBB99:
 263              	.LBB97:
 234:../HostCommunication/src/PayloadHelper.h **** }
 264              	 .loc 2 234 0
 265 00ce 8DF80C20 	 strb r2,[sp,#12]
 266              	.LBE97:
 267              	.LBE99:
 121:../HostCommunication/src/EndpointCalibration.c **** 
 268              	 .loc 1 121 0
 269 00d2 FFF7FEFF 	 bl protocol_send_header
 270              	.LVL39:
 123:../HostCommunication/src/EndpointCalibration.c **** 
 271              	 .loc 1 123 0
 272 00d6 03A8     	 add r0,sp,#12
 273 00d8 0321     	 movs r1,#3
 274 00da FFF7FEFF 	 bl protocol_send_payload
 275              	.LVL40:
 125:../HostCommunication/src/EndpointCalibration.c **** 
 276              	 .loc 1 125 0
 277 00de 0498     	 ldr r0,[sp,#16]
 278 00e0 BDF80A10 	 ldrh r1,[sp,#10]
 279 00e4 FFF7FEFF 	 bl protocol_send_payload
 280              	.LVL41:
 127:../HostCommunication/src/EndpointCalibration.c **** 	}
 281              	 .loc 1 127 0
 282 00e8 FFF7FEFF 	 bl protocol_send_tail
 283              	.LVL42:
 284              	.L19:
 285              	.LBE89:
 286              	.LBE88:
 287              	.LBE87:
 288              	.LBB100:
 289              	.LBB101:
 145:../HostCommunication/src/EndpointCalibration.c **** 
 290              	 .loc 1 145 0
 291 00ec 2046     	 mov r0,r4
 292              	.LBE101:
 293              	.LBE100:
 288:../HostCommunication/src/EndpointCalibration.c **** 		}
 294              	 .loc 1 288 0
 295 00ee 9CE7     	 b .L2
 296              	.LVL43:
 297              	.L9:
 258:../HostCommunication/src/EndpointCalibration.c **** 		{
 298              	 .loc 1 258 0
 299 00f0 012D     	 cmp r5,#1
 300 00f2 98D1     	 bne .L32
 260:../HostCommunication/src/EndpointCalibration.c **** 
 301              	 .loc 1 260 0
 302 00f4 1846     	 mov r0,r3
 303              	.LVL44:
 304 00f6 2946     	 mov r1,r5
 305              	.LVL45:
 306 00f8 0022     	 movs r2,#0
 307 00fa FFF7FEFF 	 bl radar_clear_calibration
 308              	.LVL46:
 262:../HostCommunication/src/EndpointCalibration.c **** 		}
 309              	 .loc 1 262 0
 310 00fe 94E7     	 b .L2
 311              	.LVL47:
 312              	.L10:
 297:../HostCommunication/src/EndpointCalibration.c **** 		{
 313              	 .loc 1 297 0
 314 0100 052D     	 cmp r5,#5
 315 0102 90D1     	 bne .L32
 316              	.LVL48:
 317              	.LBB116:
 318              	.LBB117:
 319              	.LBB118:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 320              	 .loc 2 464 0
 321 0104 8E78     	 ldrb r6,[r1,#2]
 322              	.LBE118:
 323              	.LBE117:
 324              	.LBB121:
 325              	.LBB122:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 326              	 .loc 2 458 0
 327 0106 CA78     	 ldrb r2,[r1,#3]
 328              	.LBE122:
 329              	.LBE121:
 330              	.LBB125:
 331              	.LBB119:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 332              	 .loc 2 464 0
 333 0108 4D78     	 ldrb r5,[r1,#1]
 334              	.LBE119:
 335              	.LBE125:
 336              	.LBB126:
 337              	.LBB123:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 338              	 .loc 2 458 0
 339 010a 0C79     	 ldrb r4,[r1,#4]
 340              	.LBE123:
 341              	.LBE126:
 342              	.LBB127:
 343              	.LBB120:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 344              	 .loc 2 464 0
 345 010c 45EA0625 	 orr r5,r5,r6,lsl#8
 346              	.LBE120:
 347              	.LBE127:
 348              	.LBB128:
 349              	.LBB124:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 350              	 .loc 2 458 0
 351 0110 42EA0424 	 orr r4,r2,r4,lsl#8
 352              	.LBE124:
 353              	.LBE128:
 306:../HostCommunication/src/EndpointCalibration.c **** 
 354              	 .loc 1 306 0
 355 0114 1846     	 mov r0,r3
 356              	.LVL49:
 357 0116 0021     	 movs r1,#0
 358              	.LVL50:
 359 0118 0122     	 movs r2,#1
 360 011a 04AB     	 add r3,sp,#16
 361              	.LVL51:
 303:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.angle_offset_deg   = rd_payload_i16(message_data, 3);
 362              	 .loc 1 303 0
 363 011c ADF81050 	 strh r5,[sp,#16]
 364              	.LVL52:
 304:../HostCommunication/src/EndpointCalibration.c **** 
 365              	 .loc 1 304 0
 366 0120 ADF81240 	 strh r4,[sp,#18]
 306:../HostCommunication/src/EndpointCalibration.c **** 
 367              	 .loc 1 306 0
 368 0124 FFF7FEFF 	 bl radar_save_calibration
 369              	.LVL53:
 370 0128 7FE7     	 b .L2
 371              	.LVL54:
 372              	.L11:
 373              	.LBE116:
 271:../HostCommunication/src/EndpointCalibration.c **** 		{
 374              	 .loc 1 271 0
 375 012a 012D     	 cmp r5,#1
 376 012c 7FF47BAF 	 bne .L32
 377              	.LVL55:
 378              	.LBB129:
 379              	.LBB130:
 145:../HostCommunication/src/EndpointCalibration.c **** 
 380              	 .loc 1 145 0
 381 0130 0DF10A01 	 add r1,sp,#10
 382              	.LVL56:
 383 0134 1846     	 mov r0,r3
 384              	.LVL57:
 385 0136 0091     	 str r1,[sp]
 386 0138 2A46     	 mov r2,r5
 387 013a 0021     	 movs r1,#0
 388 013c 03AB     	 add r3,sp,#12
 389              	.LVL58:
 390 013e FFF7FEFF 	 bl radar_read_calibration
 391              	.LVL59:
 147:../HostCommunication/src/EndpointCalibration.c **** 	{
 392              	 .loc 1 147 0
 393 0142 0446     	 mov r4,r0
 394 0144 0028     	 cmp r0,#0
 395 0146 D1D1     	 bne .L19
 396              	.LVL60:
 397              	.LBB131:
 398              	.LBB132:
 399              	.LBB133:
 234:../HostCommunication/src/PayloadHelper.h **** }
 400              	 .loc 2 234 0
 401 0148 0823     	 movs r3,#8
 402 014a 2EE0     	 b .L34
 403              	.LVL61:
 404              	.L12:
 405              	.LBE133:
 406              	.LBE132:
 407              	.LBE131:
 408              	.LBE130:
 409              	.LBE129:
 336:../HostCommunication/src/EndpointCalibration.c **** 		{
 410              	 .loc 1 336 0
 411 014c 012D     	 cmp r5,#1
 412 014e 7FF46AAF 	 bne .L32
 338:../HostCommunication/src/EndpointCalibration.c **** 
 413              	 .loc 1 338 0
 414 0152 1846     	 mov r0,r3
 415              	.LVL62:
 416 0154 2A46     	 mov r2,r5
 417 0156 0021     	 movs r1,#0
 418              	.LVL63:
 419 0158 FFF7FEFF 	 bl radar_clear_calibration
 420              	.LVL64:
 340:../HostCommunication/src/EndpointCalibration.c **** 		}
 421              	 .loc 1 340 0
 422 015c 65E7     	 b .L2
 423              	.LVL65:
 424              	.L13:
 317:../HostCommunication/src/EndpointCalibration.c **** 		{
 425              	 .loc 1 317 0
 426 015e 052D     	 cmp r5,#5
 427 0160 7FF461AF 	 bne .L32
 428              	.LVL66:
 429              	.LBB134:
 430              	.LBB135:
 431              	.LBB136:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 432              	 .loc 2 464 0
 433 0164 8E78     	 ldrb r6,[r1,#2]
 434              	.LBE136:
 435              	.LBE135:
 436              	.LBB139:
 437              	.LBB140:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 438              	 .loc 2 458 0
 439 0166 CA78     	 ldrb r2,[r1,#3]
 440              	.LBE140:
 441              	.LBE139:
 442              	.LBB143:
 443              	.LBB137:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 444              	 .loc 2 464 0
 445 0168 4D78     	 ldrb r5,[r1,#1]
 446              	.LBE137:
 447              	.LBE143:
 448              	.LBB144:
 449              	.LBB141:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 450              	 .loc 2 458 0
 451 016a 0C79     	 ldrb r4,[r1,#4]
 452              	.LBE141:
 453              	.LBE144:
 325:../HostCommunication/src/EndpointCalibration.c **** 
 454              	 .loc 1 325 0
 455 016c 0121     	 movs r1,#1
 456              	.LVL67:
 457              	.LBB145:
 458              	.LBB142:
 458:../HostCommunication/src/PayloadHelper.h ****                       ((uint16_t)payload[offset    ]));
 459              	 .loc 2 458 0
 460 016e 42EA0424 	 orr r4,r2,r4,lsl#8
 461              	.LBE142:
 462              	.LBE145:
 463              	.LBB146:
 464              	.LBB138:
 464:../HostCommunication/src/PayloadHelper.h ****             ((uint16_t)payload[offset    ]);
 465              	 .loc 2 464 0
 466 0172 45EA0625 	 orr r5,r5,r6,lsl#8
 467              	.LBE138:
 468              	.LBE146:
 325:../HostCommunication/src/EndpointCalibration.c **** 
 469              	 .loc 1 325 0
 470 0176 1846     	 mov r0,r3
 471              	.LVL68:
 472 0178 0A46     	 mov r2,r1
 473 017a 04AB     	 add r3,sp,#16
 474              	.LVL69:
 322:../HostCommunication/src/EndpointCalibration.c **** 			algo_calibration_settings.angle_offset_deg   = rd_payload_i16(message_data, 3);
 475              	 .loc 1 322 0
 476 017c ADF81050 	 strh r5,[sp,#16]
 477              	.LVL70:
 323:../HostCommunication/src/EndpointCalibration.c **** 
 478              	 .loc 1 323 0
 479 0180 ADF81240 	 strh r4,[sp,#18]
 325:../HostCommunication/src/EndpointCalibration.c **** 
 480              	 .loc 1 325 0
 481 0184 FFF7FEFF 	 bl radar_save_calibration
 482              	.LVL71:
 483 0188 4FE7     	 b .L2
 484              	.LVL72:
 485              	.L14:
 486              	.LBE134:
 284:../HostCommunication/src/EndpointCalibration.c **** 		{
 487              	 .loc 1 284 0
 488 018a 012D     	 cmp r5,#1
 489 018c 7FF44BAF 	 bne .L32
 490              	.LVL73:
 491              	.LBB147:
 492              	.LBB115:
 145:../HostCommunication/src/EndpointCalibration.c **** 
 493              	 .loc 1 145 0
 494 0190 0DF10A02 	 add r2,sp,#10
 495 0194 1846     	 mov r0,r3
 496              	.LVL74:
 497 0196 0092     	 str r2,[sp]
 498 0198 2946     	 mov r1,r5
 499              	.LVL75:
 500 019a 2A46     	 mov r2,r5
 501 019c 03AB     	 add r3,sp,#12
 502              	.LVL76:
 503 019e FFF7FEFF 	 bl radar_read_calibration
 504              	.LVL77:
 147:../HostCommunication/src/EndpointCalibration.c **** 	{
 505              	 .loc 1 147 0
 506 01a2 0446     	 mov r4,r0
 507 01a4 0028     	 cmp r0,#0
 508 01a6 A1D1     	 bne .L19
 509              	.LVL78:
 510              	.LBB102:
 511              	.LBB103:
 512              	.LBB104:
 234:../HostCommunication/src/PayloadHelper.h **** }
 513              	 .loc 2 234 0
 514 01a8 0B23     	 movs r3,#11
 515              	.LVL79:
 516              	.L34:
 517              	.LBE104:
 518              	.LBE103:
 162:../HostCommunication/src/EndpointCalibration.c **** 		wr_payload_i16(message_header, 3, ((Algo_Calibrations_t*)calibration_data_ptr)->angle_offset_deg)
 519              	 .loc 1 162 0
 520 01aa 039A     	 ldr r2,[sp,#12]
 521              	.LBB106:
 522              	.LBB105:
 234:../HostCommunication/src/PayloadHelper.h **** }
 523              	 .loc 2 234 0
 524 01ac 8DF81030 	 strb r3,[sp,#16]
 525              	.LBE105:
 526              	.LBE106:
 162:../HostCommunication/src/EndpointCalibration.c **** 		wr_payload_i16(message_header, 3, ((Algo_Calibrations_t*)calibration_data_ptr)->angle_offset_deg)
 527              	 .loc 1 162 0
 528 01b0 1388     	 ldrh r3,[r2]
 529              	.LVL80:
 530              	.LBB107:
 531              	.LBB108:
 532              	 .loc 2 519 0
 533 01b2 8DF81130 	 strb r3,[sp,#17]
 518:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  value        & 0xFF;
 534              	 .loc 2 518 0
 535 01b6 1B0A     	 lsrs r3,r3,#8
 536              	.LVL81:
 537 01b8 8DF81230 	 strb r3,[sp,#18]
 538              	.LBE108:
 539              	.LBE107:
 163:../HostCommunication/src/EndpointCalibration.c **** 
 540              	 .loc 1 163 0
 541 01bc 5388     	 ldrh r3,[r2,#2]
 542              	.LVL82:
 543              	.LBB109:
 544              	.LBB110:
 512:../HostCommunication/src/PayloadHelper.h **** }
 545              	 .loc 2 512 0
 546 01be 8DF81330 	 strb r3,[sp,#19]
 547              	.LBE110:
 548              	.LBE109:
 166:../HostCommunication/src/EndpointCalibration.c **** 
 549              	 .loc 1 166 0
 550 01c2 3046     	 mov r0,r6
 551              	.LBB113:
 552              	.LBB111:
 511:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  ((uint16_t)value)        & 0xFF;
 553              	 .loc 2 511 0
 554 01c4 1B0A     	 lsrs r3,r3,#8
 555              	.LVL83:
 556              	.LBE111:
 557              	.LBE113:
 166:../HostCommunication/src/EndpointCalibration.c **** 
 558              	 .loc 1 166 0
 559 01c6 0521     	 movs r1,#5
 560              	.LBB114:
 561              	.LBB112:
 511:../HostCommunication/src/PayloadHelper.h ****     payload[offset    ] =  ((uint16_t)value)        & 0xFF;
 562              	 .loc 2 511 0
 563 01c8 8DF81430 	 strb r3,[sp,#20]
 564              	.LBE112:
 565              	.LBE114:
 166:../HostCommunication/src/EndpointCalibration.c **** 
 566              	 .loc 1 166 0
 567 01cc FFF7FEFF 	 bl protocol_send_header
 568              	.LVL84:
 168:../HostCommunication/src/EndpointCalibration.c **** 
 569              	 .loc 1 168 0
 570 01d0 04A8     	 add r0,sp,#16
 571              	.LVL85:
 572 01d2 0521     	 movs r1,#5
 573 01d4 FFF7FEFF 	 bl protocol_send_payload
 574              	.LVL86:
 170:../HostCommunication/src/EndpointCalibration.c **** 	}
 575              	 .loc 1 170 0
 576 01d8 FFF7FEFF 	 bl protocol_send_tail
 577              	.LVL87:
 578              	.LBE102:
 145:../HostCommunication/src/EndpointCalibration.c **** 
 579              	 .loc 1 145 0
 580 01dc 2046     	 mov r0,r4
 581 01de 24E7     	 b .L2
 582              	.LVL88:
 583              	.L37:
 584              	.LBE115:
 585              	.LBE147:
 351:../HostCommunication/src/EndpointCalibration.c **** 
 586              	 .loc 1 351 0
 587 01e0 1846     	 mov r0,r3
 588              	.LVL89:
 589 01e2 2946     	 mov r1,r5
 590              	.LVL90:
 591 01e4 2A46     	 mov r2,r5
 592 01e6 FFF7FEFF 	 bl radar_clear_calibration
 593              	.LVL91:
 353:../HostCommunication/src/EndpointCalibration.c **** 		}
 594              	 .loc 1 353 0
 595 01ea 1EE7     	 b .L2
 596              	 .cfi_endproc
 597              	.LFE488:
 599              	 .section .text.ep_calibration_handle_change,"ax",%progbits
 600              	 .align 2
 601              	 .global ep_calibration_handle_change
 602              	 .thumb
 603              	 .thumb_func
 605              	ep_calibration_handle_change:
 606              	.LFB489:
 367:../HostCommunication/src/EndpointCalibration.c **** 
 368:../HostCommunication/src/EndpointCalibration.c **** //==============================================================================
 369:../HostCommunication/src/EndpointCalibration.c **** 
 370:../HostCommunication/src/EndpointCalibration.c **** void ep_calibration_handle_change (uint8_t endpoint, void* context, uint32_t what)
 371:../HostCommunication/src/EndpointCalibration.c **** {
 607              	 .loc 1 371 0
 608              	 .cfi_startproc
 609              	 
 610              	 
 611              	 
 612              	.LVL92:
 613 0000 7047     	 bx lr
 614              	 .cfi_endproc
 615              	.LFE489:
 617 0002 00BF     	 .text
 618              	.Letext0:
 619              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 620              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 621              	 .file 5 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Radar_Control/inc/radar_control.h"
 622              	 .file 6 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 623              	 .file 7 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/XMCLib/inc/xmc_vadc.h"
 624              	 .file 8 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/XMCLib/inc/xmc_usbd_regs.h"
 625              	 .file 9 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/XMCLib/inc/xmc_usbd.h"
 626              	 .file 10 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Dave/Generated/USBD/usbd.h"
 627              	 .file 11 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Radar_Control/inc/radar_calibration.h"
 628              	 .file 12 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Radar_Control/inc/radar_api.h"
 629              	 .file 13 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/CMSIS/Include/core_cm4.h"
 630              	 .file 14 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 631              	 .file 15 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Dave/Generated/ADC_MEASUREMENT_ADV/adc_measurement_adv.h"
 632              	 .file 16 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/Dave/Generated/USBD/usbd_extern.h"
 633              	 .file 17 "E:/NOVA/Assets/IFX_P2G-HW-SW_V1.0.4/Firmware_Software/DAVE project/P2G_FW/HostCommunication/include/Protocol.h"
DEFINED SYMBOLS
                            *ABS*:00000000 EndpointCalibration.c
    {standard input}:20     .text.ep_calibration_handle_message:00000000 $t
    {standard input}:25     .text.ep_calibration_handle_message:00000000 ep_calibration_handle_message
    {standard input}:58     .text.ep_calibration_handle_message:00000014 $d
    {standard input}:70     .text.ep_calibration_handle_message:00000020 $t
    {standard input}:600    .text.ep_calibration_handle_change:00000000 $t
    {standard input}:605    .text.ep_calibration_handle_change:00000000 ep_calibration_handle_change
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
radar_save_calibration
radar_read_calibration
radar_clear_calibration
protocol_send_header
protocol_send_payload
protocol_send_tail
